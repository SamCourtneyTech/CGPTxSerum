#include "SerumInterfaceComponent.h"
#include <juce_audio_processors/juce_audio_processors.h>
void SerumInterfaceComponent::paint(juce::Graphics& g)
{
    g.fillAll(juce::Colours::black);
    g.setColour(juce::Colours::white); 
    g.setFont(juce::Font("Press Start 2P", 12.0f, juce::Font::plain));
    g.drawText("Serum.vst3 not detected-Check the plugin path in the settings tab.", getLocalBounds(), juce::Justification::centred, true);
}
SerumInterfaceComponent::SerumInterfaceComponent(juce::AudioProcessor& processor)
    : parentProcessor(processor)
{
    formatManager.addDefaultFormats();
    DBG("Plugin format added: " << formatManager.getFormat(0)->getName());
    juce::AudioProcessor::BusesLayout layout;
    if (!isBusesLayoutSupported(layout))
    {
        DBG("Unsupported bus layout");
        return;
    }
}
SerumInterfaceComponent::~SerumInterfaceComponent()
{
    const juce::ScopedLock lock(criticalSection); 
    serumEditor = nullptr; 
    serumInstance = nullptr;
}
void SerumInterfaceComponent::setPluginInstance(juce::AudioPluginInstance* newPlugin)
{
    if (!newPlugin)
    {
        DBG("setPluginInstance received a null pointer.");
        return;
    }

    if (serumInstance.get() == newPlugin)
    {
        DBG("setPluginInstance called, but instance is already set.");
        return;
    }
    serumInstance.reset(newPlugin); 
    serumEditor.reset(serumInstance->createEditorIfNeeded());
    if (serumEditor)
    {
        DBG("Editor successfully created in SerumInterfaceComponent.");
        addAndMakeVisible(serumEditor.get());
        resized();
    }
    else
    {
        DBG("Failed to create editor in SerumInterfaceComponent.");
    }
}
void SerumInterfaceComponent::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    if (serumInstance != nullptr)
    {
        DBG("Preparing Serum with sample rate: " << sampleRate << " and block size: " << samplesPerBlock);
        serumInstance->prepareToPlay(sampleRate, samplesPerBlock);
    }
    else
    {
        DBG("Cannot prepare Serum. Instance is null.");
    }
}
void SerumInterfaceComponent::processMidiAndAudio(juce::AudioBuffer<float>& audioBuffer, juce::MidiBuffer& midiMessages, double sampleRate)
{
    DBG("processMidiAndAudio called!");
    for (const auto metadata : midiMessages)
    {
        auto message = metadata.getMessage();
        if (message.isNoteOn())
            DBG("Note On for Serum: " << message.getNoteNumber());
        else if (message.isNoteOff())
            DBG("Note Off for Serum: " << message.getNoteNumber());
    }
    if (!midiMessages.isEmpty())
    {
        DBG("MIDI buffer is not empty and forwarded correctly.");
    }
    else
    {
        DBG("MIDI buffer is empty. No notes sent to Serum.");
    }
    if (serumInstance != nullptr)
    {
        juce::ScopedLock lock(criticalSection); 
        DBG("processMidiAndAudio called!");
        DBG("Audio buffer before Serum: " << audioBuffer.getMagnitude(0, audioBuffer.getNumSamples()));
        if (!midiMessages.isEmpty())
        {
            DBG("Forwarding MIDI to Serum: " << midiMessages.getNumEvents() << " events.");
        }
        else
        {
            DBG("MIDI buffer is empty before forwarding to Serum.");
        }
        serumInstance->processBlock(audioBuffer, midiMessages);
        DBG("Audio buffer after Serum: " << audioBuffer.getMagnitude(0, audioBuffer.getNumSamples()));

        if (audioBuffer.getMagnitude(0, audioBuffer.getNumSamples()) > 0.0f)
        {
            DBG("Audio data present in buffer.");
        }
        else
        {
            DBG("No audio generated by Serum.");
        }
        if (!midiMessages.isEmpty())
            DBG("MIDI forwarded to Serum!");
    }
    else
    {
        DBG("Serum instance is null.");
        audioBuffer.clear(); 
    }
}
void SerumInterfaceComponent::loadSerum(const juce::File& pluginPath)
{
    if (serumInstance != nullptr)
    {
        serumEditor.reset();
        serumInstance.reset();
        DBG("Unloaded previous plugin instance.");
    }
    if (!pluginPath.exists()) 
    {
        DBG("Plugin path does not exist: " << pluginPath.getFullPathName());
        return;
    }
    if (pluginPath.isDirectory())
    {
        DBG("Plugin path is a directory: " << pluginPath.getFullPathName());
    }
    else if (pluginPath.existsAsFile())
    {
        DBG("Plugin path is a file: " << pluginPath.getFullPathName());
    }
    else
    {
        DBG("Plugin path is neither a valid file nor directory: " << pluginPath.getFullPathName());
        return;
    }
    juce::AudioProcessor::BusesLayout layout;
    if (!isBusesLayoutSupported(layout))
    {
        DBG("Unsupported bus layout");
        return;
    }
    DBG("Bus layout is supported, proceeding to load plugin.");
    double sampleRate = parentProcessor.getSampleRate();
    int blockSize = parentProcessor.getBlockSize();
    DBG("Sample Rate: " << sampleRate);
    DBG("Block Size: " << blockSize);
    auto* format = formatManager.getFormat(0);
    if (format == nullptr)
    {
        DBG("No plugin formats available!");
        return;
    }
    juce::KnownPluginList pluginList;
    juce::PluginDescription pluginDescription;
    juce::String errorMessage;
    juce::OwnedArray<juce::PluginDescription> descriptions;
    if (!pluginList.scanAndAddFile(pluginPath.getFullPathName(),
        true, 
        descriptions,
        *format)) 
    {
        DBG("Failed to scan and add plugin: " << pluginPath.getFullPathName());
        return;
    }
    if (descriptions.isEmpty())
    {
        DBG("No plugin descriptions found!");
        return;
    }
        pluginDescription = *descriptions.getFirst();
        if (!pluginDescription.fileOrIdentifier.isEmpty())
        {
            DBG("Plugin Name: " << pluginDescription.name);
            DBG("Manufacturer: " << pluginDescription.manufacturerName);
            DBG("File Path: " << pluginDescription.fileOrIdentifier);
            DBG("Plugin Format: " << pluginDescription.pluginFormatName);
            DBG("Version: " << pluginDescription.version);
            DBG("Unique ID: " << pluginDescription.uniqueId);
            DBG("Category: " << pluginDescription.category);
            DBG("Is Instrument: " << (pluginDescription.isInstrument ? "true" : "false"));
        }
        else
        {
            DBG("Plugin description is invalid.");
        }
    std::unique_ptr<juce::AudioPluginInstance> instance;
    instance = formatManager.createPluginInstance(pluginDescription, sampleRate, blockSize, errorMessage);
    if (instance == nullptr)
    {

        DBG("Error loading plugin: " << errorMessage);
        return;
    }
    DBG("Plugin instance created!");
    serumInstance = std::move(instance);
    DBG("Serum instance initialized!");
    serumEditor.reset(serumInstance->createEditorIfNeeded());
    if (serumEditor != nullptr)
    {
        DBG("Editor created successfully!");
        addAndMakeVisible(serumEditor.get());
        resized();
    }
    else
    {
        DBG("Failed to create plugin editor.");
    }
}
void SerumInterfaceComponent::resized()
{
    const juce::ScopedLock lock(criticalSection); 
    if (serumEditor != nullptr)
    {
        serumEditor->setBounds(getLocalBounds()); 
    }
}
bool SerumInterfaceComponent::isBusesLayoutSupported(const juce::AudioProcessor::BusesLayout& layouts) const
{
    const auto& mainOutput = layouts.getMainOutputChannelSet();
    const auto& mainInput = layouts.getMainInputChannelSet();
    if (!mainInput.isDisabled() && mainInput != mainOutput)
        return false;
    if (mainOutput.size() > 2)
        return false;
    return true; 
}
